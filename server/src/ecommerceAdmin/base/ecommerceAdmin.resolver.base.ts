/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EcommerceAdmin } from "./EcommerceAdmin";
import { EcommerceAdminCountArgs } from "./EcommerceAdminCountArgs";
import { EcommerceAdminFindManyArgs } from "./EcommerceAdminFindManyArgs";
import { EcommerceAdminFindUniqueArgs } from "./EcommerceAdminFindUniqueArgs";
import { CreateEcommerceAdminArgs } from "./CreateEcommerceAdminArgs";
import { UpdateEcommerceAdminArgs } from "./UpdateEcommerceAdminArgs";
import { DeleteEcommerceAdminArgs } from "./DeleteEcommerceAdminArgs";
import { EcommerceAdminService } from "../ecommerceAdmin.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EcommerceAdmin)
export class EcommerceAdminResolverBase {
  constructor(
    protected readonly service: EcommerceAdminService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "read",
    possession: "any",
  })
  async _ecommerceAdminsMeta(
    @graphql.Args() args: EcommerceAdminCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EcommerceAdmin])
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "read",
    possession: "any",
  })
  async ecommerceAdmins(
    @graphql.Args() args: EcommerceAdminFindManyArgs
  ): Promise<EcommerceAdmin[]> {
    return this.service.ecommerceAdmins(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EcommerceAdmin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "read",
    possession: "own",
  })
  async ecommerceAdmin(
    @graphql.Args() args: EcommerceAdminFindUniqueArgs
  ): Promise<EcommerceAdmin | null> {
    const result = await this.service.ecommerceAdmin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EcommerceAdmin)
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "create",
    possession: "any",
  })
  async createEcommerceAdmin(
    @graphql.Args() args: CreateEcommerceAdminArgs
  ): Promise<EcommerceAdmin> {
    return await this.service.createEcommerceAdmin({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EcommerceAdmin)
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "update",
    possession: "any",
  })
  async updateEcommerceAdmin(
    @graphql.Args() args: UpdateEcommerceAdminArgs
  ): Promise<EcommerceAdmin | null> {
    try {
      return await this.service.updateEcommerceAdmin({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EcommerceAdmin)
  @nestAccessControl.UseRoles({
    resource: "EcommerceAdmin",
    action: "delete",
    possession: "any",
  })
  async deleteEcommerceAdmin(
    @graphql.Args() args: DeleteEcommerceAdminArgs
  ): Promise<EcommerceAdmin | null> {
    try {
      return await this.service.deleteEcommerceAdmin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
