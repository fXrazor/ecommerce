/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EcommerceAdmin as PrismaEcommerceAdmin } from "@prisma/client";
import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class EcommerceAdminServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(
    args: Omit<Prisma.EcommerceAdminCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ecommerceAdmin.count(args);
  }

  async ecommerceAdmins<T extends Prisma.EcommerceAdminFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EcommerceAdminFindManyArgs>
  ): Promise<PrismaEcommerceAdmin[]> {
    return this.prisma.ecommerceAdmin.findMany<Prisma.EcommerceAdminFindManyArgs>(
      args
    );
  }
  async ecommerceAdmin<T extends Prisma.EcommerceAdminFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EcommerceAdminFindUniqueArgs>
  ): Promise<PrismaEcommerceAdmin | null> {
    return this.prisma.ecommerceAdmin.findUnique(args);
  }
  async createEcommerceAdmin<T extends Prisma.EcommerceAdminCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EcommerceAdminCreateArgs>
  ): Promise<PrismaEcommerceAdmin> {
    return this.prisma.ecommerceAdmin.create<T>({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateEcommerceAdmin<T extends Prisma.EcommerceAdminUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EcommerceAdminUpdateArgs>
  ): Promise<PrismaEcommerceAdmin> {
    return this.prisma.ecommerceAdmin.update<T>({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteEcommerceAdmin<T extends Prisma.EcommerceAdminDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EcommerceAdminDeleteArgs>
  ): Promise<PrismaEcommerceAdmin> {
    return this.prisma.ecommerceAdmin.delete(args);
  }
}
